#!/usr/bin/perl
#
# read all etting file paths from ./conf/settings,
# read each setting files, and write them into ./status/settingcontents.
#

use strict;
use Cwd 'abs_path';
use Fcntl ':mode';

our $TOOLHOME;
our $MD5;

BEGIN {
	$0 =~ m"^(.*)/";
        $TOOLHOME = abs_path( ($1 // '.') . '/..');
        push @INC, "$TOOLHOME/lib/perl5";

	eval {
		require Digest::MD5;
		$MD5 = new Digest::MD5;
	};
	if ($@) {
		require Digest::Perl::MD5;
		$MD5 = new Digest::Perl::MD5;
	}
}

our $STATUSDIR = "$TOOLHOME/status";
our $CONFDIR = "$TOOLHOME/conf";


########

sub encode_ctrlcode ($) {
	$_[0] =~ s{ ([\x00-\x20\x7f\\]) }{ '\x' . uc(unpack('H2', $1)) }egx;
	return $_[0];
}

sub decode_ctrlcode ($) {
	$_[0] =~ s{ \\x([0-9a-f]{2}) }{ pack('H2', $1) }egx;
	return $_[0];
}

########
sub read_settings () {
	my @settings;
	open my $h, "<", "$CONFDIR/settings" or do {
		die;
	};
	while( <$h> ){
		chomp;
		next if m"^\s*$";
		push @settings, $_;
	}
	close $h;
	return [@settings];
}

sub read_settingcontent ($) {
	my ($realpath) = @_;

	my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
	    $atime,$mtime,$ctime,$blksize,$blocks) = lstat $realpath;

	my $dst_mode    = sprintf "%o",    $mode;
	my $dst_uid_gid = sprintf "%d:%d", $uid, $gid;
	my $dst_size    = sprintf "%d",    $size;
	my $dst_mtime   = sprintf "%d",    $mtime;

	if    ( ! defined $mode ){
		return 'NONE', undef;
	}elsif( S_ISDIR($mode) ){
		return 'DIR', undef;
	}elsif( S_ISBLK($mode) || S_ISCHR($mode) ){
		return 'DEVICE', undef;
	}elsif( S_ISFIFO($mode) ){
		return 'PIPE', undef;
	}elsif( S_ISSOCK($mode) ){
		return 'SOCKET', undef;
	}elsif( S_ISLNK($mode) ){
		return 'SYMLINK', undef;
	}

	if    ( $size > 100000000 ){
		return 'LARGEFILE', "-,$size";
	}

	open my $h, '<', $realpath or do {
		die "$realpath: cannot open, stopped";
	};
	my @content = <$h>;
	my $content = join '', @content;
	close $h;

	if   ( $size > 100000 ){
		$MD5->reset;
		$MD5->add( $content );
		my $digest = $MD5->digest;
		$digest =~ s{(.)}{ uc unpack('H2', $1) }egs;
		return 'LARGEFILE', "$digest,$size";
	}elsif( $content =~ m"[\x00-\x08\x0c\x0e-\x16\x18-\x1a\x1c-\x1f]" ){
		$MD5->reset;
		$MD5->add( $content );
		my $digest = $MD5->digest;
		$digest =~ s{(.)}{ uc unpack('H2', $1) }egs;
		return 'BINARYFILE', "$digest,$size";
	}

	return 'FILE', \@content;
}

sub read_and_write_settingcontents ($) {
	my ($settings) = @_;
	my %settingtypes;
	my %settingcontents;

	open my $h, ">", "$STATUSDIR/settingcontents.tsv" or do {
		die;
	};

	foreach my $path ( sort @$settings ){
		my $realpath = $path;
		$realpath =~ s{\$([0-9a-fA-F]{2})}{pack("H2", $1);}eg;

		my ($type, $content) = read_settingcontent $realpath;

		print $h "$path\n";
		print $h "\tTYPE\t$type\n";
		if    ( $type eq 'FILE' ){
			print $h "\tCONTENT\n";
			foreach my $i ( @$content ){
				chomp $i;
				print $h "\t\t$i\n";
			}
		}elsif( $type eq 'LARGEFILE' ){
			print $h "\tCONTENT\n";
			print $h "\t\t$content\n";
		}elsif( $type eq 'BINARYFILE' ){
			print $h "\tCONTENT\n";
			print $h "\t\t$content\n";
		}else{
		}
	}
	close $h;
}

########

my $settings        = read_settings;
read_and_write_settingcontents $settings;



